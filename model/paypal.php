<?phpclass Paypal{	function __construct()	{        $this->is_test = get_option('paypal_test');		$this->paypalmode = get_option('paypal_test') ? ".sandbox" : "";		$this->port = get_option('paypal_test') ? 443 : 80;		$this->url = "https://www".$this->paypalmode.".paypal.com/cgi-bin/webscr";        	}	    function parseData($values)    {        $aSettings = array('business' => $values['business'],                            'cmd' => "_xclick",                            'item_name' => $values['item_name'],                            'item_number' => $values['item_number'],                            'amount' => $values['amount'],                            'currency_code' => 'USD',                            'notify_url' => urlencode(stripslashes($values['notify_url'])),                            'return' => urlencode(stripslashes($values['return'])),                            'cancel_return' => urlencode(stripslashes($values['cancel_return'])),							'custom' => $values['custom'],                            'no_shipping' => '1',                            'no_note' => '1');        $dataString = null;        foreach($aSettings as $k => $v)        {            $dataString[] = $k."=".$v;        }        $dataString = implode('&', $dataString);        $url = $this->url."?".$dataString;        return $url;    }    public function callback()    {        if(isset($_POST) && $_POST != null)        {            $this->write_log("\n");            if($this->is_test)            {                $this->write_log('Paypal test');            }            else             {                $this->write_log('Paypal real');            }            $this->postback_params = $_POST;                        //listner            $bVerified = $this->listener();            $this->write_log('Paypal verify created');            $this->write_log('Paypal return params: '.json_encode($_POST));            if ($bVerified)            {                $this->write_log('Paypal verify valid');                if (isset($_POST['payment_status']))                {                    $this->write_log('Paypal payment_status: '.$_POST['payment_status']);                    switch($_POST['payment_status'])                    {                        case 'Completed':                            return 'completed';                            break;                        case 'Pending':                            return 'pending';                            break;                        case 'Expired':                            return 'expired';                            break;                        case 'Refunded':                            return 'refunded';                            break;                        case 'Failed':                            return 'failed';                            break;                        case 'Reversed':                            return 'reversed';                            break;                    }                    return $_POST['payment_status'];                }                $this->write_log('Paypal payment_status: no status found');                return false;            }            $this->write_log('Paypal verify invalid');            return false;        }        $this->write_log('Paypal no post data');        return false;    }        public static function getPostbackParams()    {        return $this->postback_params;    }        private function write_log($log = null)      {        $file = FANVICTOR__PLUGIN_DIR_MODEL."playpal_log.txt";        if($log != null)        {            $content = '';            if(file_exists($file))            {                $content = file_get_contents($file)."\n";            }            $myfile = fopen(FANVICTOR__PLUGIN_DIR_MODEL."playpal_log.txt", "w");            fwrite($myfile, $content.$log);            fclose($myfile);        }    }        private function listener()    {        $raw_post_data = file_get_contents('php://input');        $raw_post_array = explode('&', $raw_post_data);        $myPost = array();        foreach ($raw_post_array as $keyval)         {            $keyval = explode('=', $keyval);            if (count($keyval) == 2)            {                $myPost[$keyval[0]] = urldecode($keyval[1]);            }        }        // read the post from PayPal system and add 'cmd'        $req = 'cmd=_notify-validate';        if (function_exists('get_magic_quotes_gpc'))         {            $get_magic_quotes_exists = true;        }                foreach ($myPost as $key => $value)         {            if ($get_magic_quotes_exists == true && get_magic_quotes_gpc() == 1)             {                $value = urlencode(stripslashes($value));            }             else             {                $value = urlencode($value);            }            $req .= "&$key=$value";        }        // Post IPN data back to PayPal to validate the IPN data is genuine        // Without this step anyone can fake IPN data        $ch = curl_init($this->url);        if ($ch == FALSE)         {            return FALSE;        }		        curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        curl_setopt($ch, CURLOPT_POSTFIELDS, $req);        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);		curl_setopt($ch, CURLOPT_CAINFO, FANVICTOR__PLUGIN_DIR_MODEL."api_cert_chain.crt");        curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Connection: Close'));		if( !($res = curl_exec($ch)) ) 		{			if ($this->ipn_log)             {                $this->write_log("Can't connect to PayPal to validate IPN message: ".curl_error($ch));            }            curl_close($ch);            return FALSE;		}		else 		{			// Log the entire HTTP response if debug is switched on.            if ($this->ipn_log)             {                $this->write_log("HTTP request of validation request:" . curl_getinfo($ch, CURLINFO_HEADER_OUT) . " for IPN payload: $req" . PHP_EOL);                $this->write_log("HTTP response of validation request: $res" . PHP_EOL);            }		}		curl_close($ch); 		        // Inspect IPN validation result and act accordingly        if (strcmp($res, "VERIFIED") == 0)         {            if ($this->ipn_log)             {                $this->write_log("Verified IPN: $req " . PHP_EOL);            }            return TRUE;        }         else if (strcmp($res, "INVALID") == 0)         {            // log for manual investigation            // Add business logic here which deals with invalid IPN messages            if ($this->ipn_log)             {                $this->write_log("Invalid IPN: $req" . PHP_EOL);            }            return FALSE;        }    }}?>